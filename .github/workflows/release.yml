name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string

env:
  MAVEN_OPTS: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven

    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"

    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9-]+)?$ ]]; then
          echo "‚ùå Invalid version format: $VERSION"
          echo "Expected format: X.Y.Z or X.Y.Z-suffix"
          exit 1
        fi
        echo "‚úÖ Version format is valid: $VERSION"

    - name: Run full test suite
      run: |
        mvn clean test -B
        echo "‚úÖ All tests passed"

    - name: Build release package
      run: |
        mvn clean package -DskipTests -B
        echo "‚úÖ Release package built successfully"

  build-and-publish:
    name: Build and Publish Release
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven

    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Update version in pom.xml
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        mvn versions:set -DnewVersion=$VERSION -DgenerateBackupPoms=false
        echo "Updated version to: $VERSION"

    - name: Build release artifacts
      run: |
        mvn clean package -DskipTests -B
        
        # Create checksums
        cd target
        sha256sum kafka-http-source-connector-*.jar > checksums.txt
        sha256sum components/packages/*.zip >> checksums.txt
        
        echo "‚úÖ Release artifacts built with checksums"

    - name: Create release notes
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        cat > release-notes.md << EOF
        # Kafka HTTP Source Connector v$VERSION
        
        ## üöÄ Features
        
        ### Core Functionality
        - **Multiple API Support**: Poll up to 15 different HTTP/HTTPS endpoints
        - **Authentication**: Support for None, Basic, Bearer Token, OAuth2, and API Key authentication
        - **Offset Management**: Simple incrementing, cursor-based pagination, and timestamp-based offsets
        - **Data Formats**: AVRO, JSON Schema Registry, and Protobuf support
        
        ### Enterprise Features
        - **API Chaining**: Parent-child API relationships with data dependencies
        - **Field-Level Encryption**: Client-side field encryption with AES-GCM, DETERMINISTIC, and RANDOM modes
        - **Advanced Error Handling**: Circuit breaker patterns with intelligent error categorization
        - **Performance Optimization**: Response caching and adaptive polling intervals
        
        ### Security & Reliability
        - **SSL/TLS Support**: TLSv1.3 with proper certificate validation
        - **Circuit Breakers**: Prevent cascading failures with configurable thresholds
        - **Error Categories**: Intelligent handling of transient, authentication, and client errors
        - **Rate Limiting**: Respectful API consumption with backoff strategies
        
        ## üì¶ Installation
        
        ### Via Confluent Hub
        \`\`\`bash
        confluent-hub install your-org/kafka-http-source-connector:$VERSION
        \`\`\`
        
        ### Manual Installation
        1. Download the \`kafka-http-source-connector-$VERSION-jar-with-dependencies.jar\`
        2. Copy to your Kafka Connect plugins directory
        3. Restart Kafka Connect
        
        ## üîó Quick Start
        
        \`\`\`json
        {
          "name": "http-source-connector",
          "config": {
            "connector.class": "io.confluent.connect.http.HttpSourceConnector",
            "tasks.max": "1",
            "http.api.base.url": "https://api.example.com/v1",
            "api1.http.api.path": "/users",
            "api1.topics": "users-topic",
            "output.data.format": "JSON_SR"
          }
        }
        \`\`\`
        
        ## üìã What's Included
        
        - \`kafka-http-source-connector-$VERSION.jar\` - Main connector JAR
        - \`kafka-http-source-connector-$VERSION-jar-with-dependencies.jar\` - Fat JAR with all dependencies
        - \`your-org-kafka-http-source-connector-$VERSION.zip\` - Confluent Hub package
        - Complete documentation and examples
        
        ## üîç Verification
        
        All artifacts include SHA256 checksums for verification. See \`checksums.txt\`.
        
        ## üìö Documentation
        
        - [README](https://github.com/your-org/kafka-http-source-connector/blob/v$VERSION/README.md)
        - [Enterprise Features Guide](https://github.com/your-org/kafka-http-source-connector/blob/v$VERSION/ENTERPRISE_FEATURES.md)
        - [Configuration Examples](https://github.com/your-org/kafka-http-source-connector/tree/v$VERSION/examples)
        
        ## üÜî Build Information
        
        - **Git Commit**: ${{ github.sha }}
        - **Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        - **Java Version**: $(java -version 2>&1 | head -n 1)
        - **Workflow Run**: [\#${{ github.run_number }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.validate-release.outputs.version }}
        name: Kafka HTTP Source Connector v${{ needs.validate-release.outputs.version }}
        body_path: release-notes.md
        draft: false
        prerelease: ${{ contains(needs.validate-release.outputs.version, '-') }}
        files: |
          target/kafka-http-source-connector-*.jar
          target/components/packages/*.zip
          target/checksums.txt
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload to Confluent Hub (if configured)
      if: env.CONFLUENT_HUB_TOKEN != ''
      run: |
        echo "üöÄ Uploading to Confluent Hub..."
        # Add Confluent Hub upload logic here if you have an account
        echo "Confluent Hub upload would happen here with proper credentials"
      env:
        CONFLUENT_HUB_TOKEN: ${{ secrets.CONFLUENT_HUB_TOKEN }}

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-publish]
    
    steps:
    - name: Notify teams
      uses: actions/github-script@v6
      with:
        script: |
          const version = "${{ needs.validate-release.outputs.version }}";
          const releaseUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/v${version}`;
          
          // Create a discussion post
          try {
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${version}`,
              name: `Kafka HTTP Source Connector v${version}`,
              body: `üéâ **New Release Available!**\n\n[Download v${version}](${releaseUrl})\n\n**What's New:**\n- Enterprise-grade HTTP source connector\n- Field-level encryption support\n- Advanced error handling with circuit breakers\n- Performance optimization features\n\nSee the [full release notes](${releaseUrl}) for details.`,
              draft: false,
              prerelease: false
            });
          } catch (error) {
            console.log('Release already exists or error creating:', error.message);
          }

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-publish]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update version in documentation
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        # Update version references in README
        sed -i "s/1\.0\.0-SNAPSHOT/$VERSION/g" README.md
        sed -i "s/version-[0-9]\+\.[0-9]\+\.[0-9]\+/version-$VERSION/g" README.md
        
        # Update CHANGELOG if it exists
        if [ -f "CHANGELOG.md" ]; then
          sed -i "1i\\## [$VERSION] - $(date +%Y-%m-%d)\\n" CHANGELOG.md
        fi
        
        echo "üìù Documentation updated for version $VERSION"

    - name: Commit documentation updates
      run: |
        git add README.md CHANGELOG.md || true
        git commit -m "docs: update documentation for v${{ needs.validate-release.outputs.version }}" || true
        git push origin main || true